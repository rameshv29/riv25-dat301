AWSTemplateFormatVersion: '2010-09-09'
Description: 'MCP Servers Infrastructure - CloudWatch MCP Server on ECS Fargate'

Parameters:
  ProjectName:
    Type: String
    Default: 'mcp-servers'
    Description: Project name for resource naming
    
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: Environment name
    
  VpcId:
    Type: String
    Default: ''
    Description: 'VPC ID (leave empty to create new VPC)'
    
  PublicSubnet1Id:
    Type: String
    Default: ''
    Description: 'Public Subnet 1 ID (leave empty to create new subnets)'
    
  PublicSubnet2Id:
    Type: String
    Default: ''
    Description: 'Public Subnet 2 ID (leave empty to create new subnets)'
    
  PrivateSubnet1Id:
    Type: String
    Default: ''
    Description: 'Private Subnet 1 ID (leave empty to create new subnets)'
    
  PrivateSubnet2Id:
    Type: String
    Default: ''
    Description: 'Private Subnet 2 ID (leave empty to create new subnets)'
    
  CloudWatchMCPPort:
    Type: Number
    Default: 8000
    Description: Port for CloudWatch MCP Server
    
  DesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of tasks for each service
    
  TaskCpu:
    Type: String
    Default: '512'
    AllowedValues: ['256', '512', '1024', '2048', '4096']
    Description: CPU units for ECS tasks
    
  TaskMemory:
    Type: String
    Default: '1024'
    AllowedValues: ['512', '1024', '2048', '4096', '8192']
    Description: Memory (MB) for ECS tasks

Conditions:
  CreateVPC: !Equals [!Ref VpcId, '']
  CreateSubnets: !Equals [!Ref PublicSubnet1Id, '']

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicSubnet1:
      CIDR: '10.0.1.0/24'
    PublicSubnet2:
      CIDR: '10.0.2.0/24'
    PrivateSubnet1:
      CIDR: '10.0.3.0/24'
    PrivateSubnet2:
      CIDR: '10.0.4.0/24'

Resources:
  # ==========================================
  # NETWORKING RESOURCES
  # ==========================================
  
  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateVPC
    Properties:
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !FindInMap [SubnetConfig, PublicSubnet1, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !FindInMap [SubnetConfig, PublicSubnet2, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !FindInMap [SubnetConfig, PrivateSubnet1, CIDR]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !FindInMap [SubnetConfig, PrivateSubnet2, CIDR]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-rt'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVPC
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnets
    Properties:
      RouteTableId: !If [CreateVPC, !Ref PublicRouteTable, !Ref 'AWS::NoValue']
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnets
    Properties:
      RouteTableId: !If [CreateVPC, !Ref PublicRouteTable, !Ref 'AWS::NoValue']
      SubnetId: !Ref PublicSubnet2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: CreateVPC
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-1'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: CreateVPC
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-2'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: CreateVPC
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !If [CreateSubnets, !Ref PublicSubnet1, !Ref PublicSubnet1Id]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateVPC
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !If [CreateSubnets, !Ref PublicSubnet2, !Ref PublicSubnet2Id]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-2'

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-rt-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: CreateVPC
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnets
    Properties:
      RouteTableId: !If [CreateVPC, !Ref PrivateRouteTable1, !Ref 'AWS::NoValue']
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-rt-2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: CreateVPC
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnets
    Properties:
      RouteTableId: !If [CreateVPC, !Ref PrivateRouteTable2, !Ref 'AWS::NoValue']
      SubnetId: !Ref PrivateSubnet2

  # ==========================================
  # SECURITY GROUPS
  # ==========================================

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MCP Servers Application Load Balancer
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MCP Servers ECS tasks
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref CloudWatchMCPPort
          ToPort: !Ref CloudWatchMCPPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: CloudWatch MCP Server port from ALB
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ecs-sg'

  # ==========================================
  # ECR REPOSITORIES
  # ==========================================

  CloudWatchMCPRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${ProjectName}/${Environment}/cloudwatch-mcp-server'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cloudwatch-mcp-repo'

  # ==========================================
  # IAM ROLES
  # ==========================================

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-ecs-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  CloudWatchMCPTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-cloudwatch-mcp-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - logs:*
                  - application-insights:*
                  - xray:*
                Resource: '*'

  # ==========================================
  # ECS CLUSTER
  # ==========================================

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-${Environment}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cluster'

  # ==========================================
  # APPLICATION LOAD BALANCER
  # ==========================================

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !If [CreateSubnets, !Ref PublicSubnet1, !Ref PublicSubnet1Id]
        - !If [CreateSubnets, !Ref PublicSubnet2, !Ref PublicSubnet2Id]
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb'

  CloudWatchMCPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-cloudwatch-tg'
      Port: !Ref CloudWatchMCPPort
      Protocol: HTTP
      VpcId: !If [CreateVPC, !Ref VPC, !Ref VpcId]
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cloudwatch-tg'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: 'MCP Server not found'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  CloudWatchMCPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CloudWatchMCPTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/mcp*'
            - '/health*'
            - '/cloudwatch/health*'
      ListenerArn: !Ref ALBListener
      Priority: 100

  # ==========================================
  # CLOUDWATCH LOGS
  # ==========================================

  CloudWatchMCPLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}/${Environment}/cloudwatch-mcp'
      RetentionInDays: 7

Outputs:
  VpcId:
    Description: VPC ID
    Value: !If [CreateVPC, !Ref VPC, !Ref VpcId]
    Export:
      Name: !Sub '${ProjectName}-${Environment}-vpc-id'

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cluster-name'

  ApplicationLoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-dns'

  CloudWatchMCPRepositoryURI:
    Description: CloudWatch MCP ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${CloudWatchMCPRepository}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cloudwatch-repo-uri'

  CloudWatchMCPEndpoint:
    Description: CloudWatch MCP Server Endpoint
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/mcp'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cloudwatch-endpoint'

  ECSTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-execution-role-arn'

  CloudWatchMCPTaskRoleArn:
    Description: CloudWatch MCP Task Role ARN
    Value: !GetAtt CloudWatchMCPTaskRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cloudwatch-task-role-arn'